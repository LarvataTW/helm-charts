apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "awx.fullname" . }}-application-config
  labels:
    app.kubernetes.io/name: {{ include "awx.name" . }}
    helm.sh/chart: {{ include "awx.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  secret_key: {{ .Values.awx_secret_key }}
  awx_settings: |
    import os
    import socket
    ADMINS = ()


    AWX_PROOT_ENABLED = False

    # Automatically deprovision pods that go offline
    AWX_AUTO_DEPROVISION_INSTANCES = True

    #Autoprovisioning should replace this
    CLUSTER_HOST_ID = socket.gethostname()
    SYSTEM_UUID = '00000000-0000-0000-0000-000000000000'

    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

    REMOTE_HOST_HEADERS = ['HTTP_X_FORWARDED_FOR']

    STATIC_ROOT = '/var/lib/awx/public/static'
    PROJECTS_ROOT = '/var/lib/awx/projects'
    JOBOUTPUT_ROOT = '/var/lib/awx/job_status'
    SECRET_KEY = file('/etc/tower/SECRET_KEY', 'rb').read().strip()
    ALLOWED_HOSTS = ['*']
    INTERNAL_API_URL = 'http://127.0.0.1:8052'
    SERVER_EMAIL = 'root@localhost'
    DEFAULT_FROM_EMAIL = 'webmaster@localhost'
    EMAIL_SUBJECT_PREFIX = '[AWX] '
    EMAIL_HOST = 'localhost'
    EMAIL_PORT = 25
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    EMAIL_USE_TLS = False

    LOGGING['handlers']['console'] = {
        '()': 'logging.StreamHandler',
        'level': 'DEBUG',
        'formatter': 'simple',
    }

    LOGGING['loggers']['django.request']['handlers'] = ['console']
    LOGGING['loggers']['rest_framework.request']['handlers'] = ['console']
    LOGGING['loggers']['awx']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.commands.run_callback_receiver']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.commands.inventory_import']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.tasks']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.scheduler']['handlers'] = ['console']
    LOGGING['loggers']['django_auth_ldap']['handlers'] = ['console']
    LOGGING['loggers']['social']['handlers'] = ['console']
    LOGGING['loggers']['system_tracking_migrations']['handlers'] = ['console']
    LOGGING['loggers']['rbac_migrations']['handlers'] = ['console']
    LOGGING['loggers']['awx.isolated.manager.playbooks']['handlers'] = ['console']
    LOGGING['handlers']['callback_receiver'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['fact_receiver'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['task_system'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['tower_warnings'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['rbac_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['system_tracking_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['management_playbooks'] = {'class': 'logging.NullHandler'}

    DATABASES = {
        'default': {
            'ATOMIC_REQUESTS': True,
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': "{{ .Values.postgresql.postgresqlDatabase }}",
            'USER': "{{ .Values.postgresql.postgresqlUsername }}",
            'PASSWORD': "{{ .Values.postgresql.postgresqlPassword }}",
            'HOST': "{{ include "awx.fullname" . }}-postgresql",
            'PORT': "5432",
        }
    }

    BROKER_URL = 'amqp://{}:{}@{}:{}/{}'.format(
        "{{ .Values.rabbitmq.rabbitmq.username }}",
        "{{ .Values.rabbitmq.rabbitmq.password }}",
        "{{ include "awx.fullname" . }}-rabbitmq",
        "{{ default "5672" .Values.rabbitmq.service.port }}",
        "{{ default "awx" .Values.rabbitmq.vhost }}")

    CHANNEL_LAYERS = {
        'default': {'BACKEND': 'asgi_amqp.AMQPChannelLayer',
                    'ROUTING': 'awx.main.routing.channel_routing',
                    'CONFIG': {'url': BROKER_URL}}
    }

    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
            'LOCATION': '{}:{}'.format("{{ include "awx.fullname" . }}-memcached", "{{ default "11211" .Values.memcached_port }}")
        },
        'ephemeral': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        },
    }

    USE_X_FORWARDED_PORT = True

#---

#### configmap for monkey patch ###

#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: {{ include "awx.fullname" . }}-monkey-patch
#  labels:
#    app.kubernetes.io/name: {{ include "awx.name" . }}
#    helm.sh/chart: {{ include "awx.chart" . }}
#    app.kubernetes.io/instance: {{ .Release.Name }}
#    app.kubernetes.io/managed-by: {{ .Release.Service }}
#data:
#  project_update.yml: |-
#    {{`
#    ---
#    # The following variables will be set by the runner of this playbook:
#    # project_path: PROJECTS_DIR/_local_path_
#    # scm_type: git|hg|svn|insights
#    # scm_url: https://server/repo
#    # insights_url: Insights service URL (from configuration)
#    # scm_branch: branch/tag/revision (HEAD if unset)
#    # scm_clean: true/false
#    # scm_delete_on_update: true/false
#    # scm_full_checkout: true (if for a job template run), false (if retrieving revision)
#    # scm_username: username (only for svn/insights)
#    # scm_password: password (only for svn/insights)
#    # scm_accept_hostkey: true/false (only for git, set automatically)
#    # scm_refspec: a refspec to fetch in addition to obtaining version
#    # roles_enabled: Allow us to pull roles from a requirements.yml file
#    # roles_destination: Path to save roles from galaxy to
#    # awx_version: Current running version of the awx or tower as a string
#    # awx_license_type: "open" for AWX; else presume Tower

#    - hosts: all
#      gather_facts: false
#      tasks:

#        - name: delete project directory before update
#          file:
#            path: "{{project_path|quote}}"
#            state: absent
#          when: scm_delete_on_update|default('')
#          delegate_to: localhost

#        - block:
#          - name: update project using git
#            git:
#              dest: "{{project_path|quote}}"
#              repo: "{{scm_url}}"
#              version: "{{scm_branch|quote}}"
#              refspec: "{{scm_refspec|default(omit)}}"
#              force: "{{scm_clean}}"
#              accept_hostkey: "{{scm_accept_hostkey|default(omit)}}"
#            register: git_result

#          - name: Set the git repository version
#            set_fact:
#              scm_version: "{{ git_result['after'] }}"
#            when: "'after' in git_result"
#          when: scm_type == 'git'
#          delegate_to: localhost

#        - block:
#          - name: update project using hg
#            hg:
#              dest: "{{project_path|quote}}"
#              repo: "{{scm_url|quote}}"
#              revision: "{{scm_branch|quote}}"
#              force: "{{scm_clean}}"
#            register: hg_result

#          - name: Set the hg repository version
#            set_fact:
#              scm_version: "{{ hg_result['after'] }}"
#            when: "'after' in hg_result"

#          - name: parse hg version string properly
#            set_fact:
#              scm_version: "{{scm_version|regex_replace('^([A-Za-z0-9]+).*$', '\\1')}}"
#          when: scm_type == 'hg'
#          delegate_to: localhost

#        - block:
#          - name: update project using svn
#            subversion:
#              dest: "{{project_path|quote}}"
#              repo: "{{scm_url|quote}}"
#              revision: "{{scm_branch|quote}}"
#              force: "{{scm_clean}}"
#              username: "{{scm_username|default(omit)}}"
#              password: "{{scm_password|default(omit)}}"
#            environment:
#              LC_ALL: 'en_US.UTF-8'
#            register: svn_result

#          - name: Set the svn repository version
#            set_fact:
#              scm_version: "{{ svn_result['after'] }}"
#            when: "'after' in svn_result"

#          - name: parse subversion version string properly
#            set_fact:
#              scm_version: "{{scm_version|regex_replace('^.*Revision: ([0-9]+).*$', '\\1')}}"
#          when: scm_type == 'svn'
#          delegate_to: localhost

#        - block:
#          - name: Ensure the project directory is present
#            file:
#              dest: "{{project_path|quote}}"
#              state: directory

#          - name: Fetch Insights Playbook(s)
#            insights:
#              insights_url: "{{insights_url}}"
#              username: "{{scm_username}}"
#              password: "{{scm_password}}"
#              project_path: "{{project_path}}"
#              awx_license_type: "{{awx_license_type}}"
#              awx_version: "{{awx_version}}"
#            register: results

#          - name: Save Insights Version
#            set_fact:
#              scm_version: "{{results.version}}"
#            when: results is defined
#          when: scm_type == 'insights'
#          delegate_to: localhost


#        - name: Repository Version
#          debug: msg="Repository Version {{ scm_version }}"
#          when: scm_version is defined

#    - hosts: 127.0.0.1
#      gather_facts: false
#      tasks:

#        - name: detect requirements.yml
#          stat: path={{project_path|quote}}/roles/requirements.yml
#          register: doesRequirementsExist

#        - name: fetch galaxy roles from requirements.yml
#          command: ansible-galaxy install -r requirements.yml --force -p {{roles_destination|default('.')|quote}}
#          args:
#            chdir: "{{project_path|quote}}/roles"
#          register: galaxy_result
#          when: doesRequirementsExist.stat.exists
#          changed_when: "'was installed successfully' in galaxy_result.stdout"

#        - block:
#          - name: detect collections/requirements.yml
#            stat: path={{project_path|quote}}/collections/requirements.yml
#            register: doesCollectionRequirementsExist

#          - name: fetch galaxy collections from collections/requirements.yml
#            command: ansible-galaxy collection install -r requirements.yml -p {{collections_destination|quote}}{{ ' -' + 'v' * ansible_verbosity if ansible_verbosity else '' }}
#            args:
#              chdir: "{{project_path|quote}}/collections"
#            register: galaxy_collection_result
#            when: doesCollectionRequirementsExist.stat.exists
#            changed_when: "'Installing ' in galaxy_collection_result.stdout"
#            environment:
#              ANSIBLE_FORCE_COLOR: False
#              ANSIBLE_COLLECTIONS_PATHS: "{{ collections_destination }}"

#          when: collections_enabled|bool
#          delegate_to: localhost
#    `}}